// <auto-generated />
using System;
using DATABASE.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DATABASE.Migrations
{
    [DbContext(typeof(SearchServiceDBContext))]
    [Migration("20200225180329_DeleteFtpSettings")]
    partial class DeleteFtpSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.ApiLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Exception");

                    b.Property<string>("JSON")
                        .IsRequired();

                    b.Property<string>("RequestID")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ApiLogs");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Blocked");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("ResetPassword");

                    b.Property<string>("SecurityStamp");

                    b.Property<DateTime?>("SessionTime");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<byte[]>("Document")
                        .IsRequired();

                    b.Property<float>("Saldo");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BIK");

                    b.Property<string>("BillTo");

                    b.Property<DateTime?>("BlockDate");

                    b.Property<bool?>("Blocked");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("INN");

                    b.Property<string>("KPP");

                    b.Property<string>("LegalName")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<float?>("StorageQuota");

                    b.Property<float?>("StorageUsed");

                    b.Property<int?>("TariffId");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<DateTime>("TokenExpires");

                    b.Property<int?>("UsersQuota");

                    b.Property<int?>("UsersUsed");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("ContractorId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("DocDate");

                    b.Property<string>("DocNumber")
                        .HasMaxLength(80);

                    b.Property<string>("Ext_ID")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedById")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ValidityPeriod");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractorId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ext_ID")
                        .HasMaxLength(150);

                    b.Property<string>("INN");

                    b.Property<string>("KPP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.DocFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractId");

                    b.Property<DateTime>("Created");

                    b.Property<byte[]>("FileBin")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("FileSize");

                    b.Property<long>("MetaId");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("NonFormDocId");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.DocKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DocTypeId");

                    b.ToTable("DocKinds");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.DocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DocTypes");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.ExtConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId")
                        .HasMaxLength(100);

                    b.Property<string>("FolderError")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FolderIn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FolderProcessed")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Port");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("TLS")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ExtConnections");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.ExtConnectionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConnectionID");

                    b.Property<string>("Message");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ExtConnectionLogs");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<int?>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<byte[]>("Document");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<bool>("Paid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Metadata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Amount");

                    b.Property<float?>("AmountWOVAT");

                    b.Property<string>("CardData");

                    b.Property<int>("ClientId");

                    b.Property<int?>("ContractId");

                    b.Property<int?>("ContractorId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Currency")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("DocDate");

                    b.Property<DateTime?>("DocDateTaxInvoice");

                    b.Property<int?>("DocKindId");

                    b.Property<string>("DocNumTaxInvoice")
                        .HasMaxLength(80);

                    b.Property<string>("DocNumber")
                        .HasMaxLength(80);

                    b.Property<int>("DocTypeId");

                    b.Property<string>("Ext_ID")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedById")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Operation")
                        .HasMaxLength(200);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PackageID")
                        .HasMaxLength(100);

                    b.Property<bool>("Signed");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("TablePart");

                    b.Property<bool?>("UploadedTo1C");

                    b.Property<float?>("VAT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DocKindId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Metadatas");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.NonFormDocs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("NonFormDocs");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Ext_ID")
                        .HasMaxLength(150);

                    b.Property<string>("INN");

                    b.Property<string>("KPP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<string>("SettName")
                        .HasMaxLength(200);

                    b.Property<string>("SettValue");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Tariffs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<bool>("Archived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.UserClient", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ClientId");

                    b.HasKey("UserId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.ApiLog", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Billing", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Client", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Tariffs", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Contract", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Contractor", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.DocKind", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.DocType", "DocType")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.ExtConnection", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Invoice", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Metadata", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.DocKind", "DocKind")
                        .WithMany()
                        .HasForeignKey("DocKindId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.DocType", "DocType")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.NonFormDocs", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Organization", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.Settings", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARCHIVE.COMMON.Entities.UserClient", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARCHIVE.COMMON.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ARCHIVE.COMMON.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
